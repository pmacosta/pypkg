#!/bin/bash
# make-links.sh
# Copyright (c) 2013-2019 Pablo Acosta-Serafini
# See LICENSE for details

# Find directory where script is
# from http://stackoverflow.com/questions/59895/
# can-a-bash-script-tell-what-directory-its-stored-in)
# BASH_SOURCE[0] is the pathname of the currently executing function or script
# -h True if file exists and is a symbolic link
# cd -P does not follow symbolic links
current_dir() {
    local sdir="$1"
    local udir=""
    # Resolve ${sdir} until the file is no longer a symlink
    while [ -h "${sdir}" ]; do
        udir="$(cd -P "$(dirname "${sdir}")" && pwd)"
        sdir="$(readlink "${sdir}")"
        # If ${sdir} was a relative symlink, we need to resolve it
        # relative to the path where the symlink file was located
        [[ "${sdir}" != /* ]] && sdir="${udir}/${sdir}"
    done
    udir="$(cd -P "$(dirname "${sdir}")" && pwd)"
    echo "${udir}"
}
copy_file() {
    local sbin_dir sdir fname fname_out
    sbin_dir=$1
    sdir=$2
    fname=$3
    if [ "$#" -eq 4 ]; then
        fname_out=$4
        echo "Copying ${fname} as ${fname_out}"
        rm -rf "${sdir}/${fname_out:?}"
        cp "${sbin_dir}/${fname}" "${sdir}/${fname_out}"
    else
        echo "Copying ${fname}"
        rm -rf "${sdir}/${fname:?}"
        cp "${sbin_dir}/${fname}" "${sdir}/${fname}"
    fi
}

### Unofficial strict mode
set -euo pipefail
IFS=$'\n\t'
#
sbin_dir=$(git rev-parse --show-toplevel)
pkg_dir=$(readlink -f "${sbin_dir}"/..)
data_dir="${pkg_dir}"/data
finish() { : ; }
trap finish EXIT ERR SIGINT

# Do not copy files if not a submodule
if [ "$(basename "${sbin_dir}")" == "pypkg" ]; then
    if [ -d "${sbin_dir}/.git" ]; then
        exit 0
    fi
fi

echo "pkg_dir: ${pkg_dir}"
echo "sbin_dir: ${sbin_dir}"
sdir="${pkg_dir}"
fnames=( \
    .pre-commit-config.yaml \
    .pydocstyle \
    .pylintrc \
    .hooks/pre-commit \
    .hooks/setup-git-hooks.sh \
    Makefile \
    setup.py \
)
for fname in ${fnames[*]}; do
    copy_file "${sbin_dir}" "${sdir}" "${fname}"
done
if [ -d "${pkg_dir}/tests" ]; then
    fnames=( \
        azure-pipelines.yml \
        tox.ini \
    )
    for fname in ${fnames[*]}; do
        copy_file "${sbin_dir}" "${sdir}" "${fname}"
    done
    if which cog.py &> /dev/null; then
        fname=tox.ini
        if ! cog.py -o tmp.ini "${sdir}/${fname}"; then
            rm -rf tmp.ini
            copy_file "${sbin_dir}" "${sdir}" "${fname}"
        else
            mv -f tmp.ini "${sdir}/${fname}"
        fi
    fi
    if [ -d "${pkg_dir}/docs/support" ]; then
        if grep --quiet pexdoc "${data_dir}/requirements.json"; then
            sdir="${pkg_dir}/tests"
            fname=conftest.py
            copy_file "${sbin_dir}" "${sdir}" "${fname}"
        fi
    fi
fi

sdir="${pkg_dir}/docs"
if [ -d "${sdir}" ]; then
    fname=conf.py
    copy_file "${sbin_dir}" "${sdir}" "${fname}"
    fname_in=Makefile.docs
    fname_out=Makefile
    copy_file "${sbin_dir}" "${sdir}" "${fname_in}" "${fname_out}"
fi

sdir="${pkg_dir}/docs/support"
fnames=( \
    incfile.py \
    requirements_to_rst.py \
    term_echo.py \
)
if [ -d "${sdir}" ]; then
    for fname in ${fnames[*]}; do
        copy_file "${sbin_dir}" "${sdir}" "${fname}"
    done
fi

fname=trace_support.py
if [ -f "${data_dir}/requirements.json" ]; then
    if grep --quiet pexdoc "${data_dir}/requirements.json"; then
        copy_file "${sbin_dir}" "${sdir}" "${fname}"
    fi
fi
